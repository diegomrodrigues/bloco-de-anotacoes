/*
 * Copyright 2018 [Drsolutions Tecnologia em Informática Ltda.-ME].
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package br.com.drsolutions.blocodeanotacoes.ui;

import br.com.drsolutions.blocodeanotacoes.arquivos.GerenciarArquivos;
import java.awt.Font;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 * Criar a janela principal do Bloco de Anotações.
 * 
 * @author Diego Mendes Rodrigues
 * @version 1.1
 */
public class JanelaPrincipal extends javax.swing.JFrame {

	private static final long serialVersionUID = -7780690520661664866L;
	
	private static final String TITULO_DA_JANELA = " - Bloco de Anotações v1.1";

	/**
     * Bloquer ou desbloquer as opções 'Salvar' e 'Salvar como' 
     * do menu 'Arquivo'
     * 
     * @param bloquear que ao receber true bloqueia as opções
     */
    private void bloquerBotaoSalvar(boolean bloquear) {
        menuSalvar.setEnabled(!bloquear);
        menuSalvarComo.setEnabled(!bloquear);
    }
    
    /** 
     * Crição do formulário principal do Bloco de Anotações, com a inicialização
     * dos componentes, centralização da janela, numeração das linhas do
     * txtTexto que é um JTextArea.
     */
    public JanelaPrincipal() {
        initComponents();
        
        /* Inserir o ícone no JFrame */
        String iconeCaminho = "/br/com/drsolutions/blocodeanotacoes/imagens/"
                + "Icone-16-16.png";
        
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(iconeCaminho)));
        
        /* Centralizar a janela */
        setLocationRelativeTo(null);
        
        /* Numerando as linhas do texto da anotação */
        setContentPane(NumeredBorder.getPanel(txtTexto));
        
        /* Definindo com 4 caracteres o espaço do <TAB> */
        txtTexto.setTabSize(4);
        
        /* Definindo o tamanho da fonte */
        txtTexto.setFont(new Font("Serif", Font.PLAIN, 13));
        //txtTexto.setFont(txtTexto.getFont().deriveFont(13f));
        
        /* Inicializando as variáveis */
        alteracoesNoDocumento = 0;
        nomeDoArquivo = "Sem título";
        caminhoDoArquivo = "";
        tituloDaJanela = nomeDoArquivo + TITULO_DA_JANELA;
        
        /* Colocando o título da janela */
        setTitle(tituloDaJanela);
        
        /* Bloqueando 'Salvar' e 'Salvar Como' */
        bloquerBotaoSalvar(true);
        
        /* Verificando as alterações no documento, sendo que quando acontecerem
           a variável interna alteracoesNoDocumento será alterada, além dos 
           botões 'Salvar' e 'Salvar Como' serem habilitados 
        */
        txtTexto.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void removeUpdate(DocumentEvent e) {
            alteracoesNoDocumento = 1;
                bloquerBotaoSalvar(false);
                
                tituloDaJanela = nomeDoArquivo + "* - Bloco de Anotações v1.1";
                
                /* Colocando o título da janela */
                setTitle(tituloDaJanela);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                alteracoesNoDocumento = 1;
                bloquerBotaoSalvar(false);
                
                tituloDaJanela = nomeDoArquivo + "* - Bloco de Anotações v1.1";
                
                /* Colocando o título da janela */
                setTitle(tituloDaJanela);
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtTexto = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArquivo = new javax.swing.JMenu();
        menuNovo = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuAbrir = new javax.swing.JMenuItem();
        menuSalvar = new javax.swing.JMenuItem();
        menuSalvarComo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuSair = new javax.swing.JMenuItem();
        menuAjuda = new javax.swing.JMenu();
        menuConteudoAjuda = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        menuSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(300, 200));
        setPreferredSize(new java.awt.Dimension(600, 410));

        jScrollPane1.setAlignmentX(0.0F);
        jScrollPane1.setAlignmentY(0.0F);

        txtTexto.setColumns(20);
        txtTexto.setRows(5);
        txtTexto.setAlignmentX(0.0F);
        txtTexto.setAlignmentY(0.0F);
        txtTexto.setCaretColor(java.awt.Color.gray);
        jScrollPane1.setViewportView(txtTexto);

        menuArquivo.setText("Arquivo");

        menuNovo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNovo.setText("Novo");
        menuNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNovoActionPerformed(evt);
            }
        });
        menuArquivo.add(menuNovo);
        menuArquivo.add(jSeparator2);

        menuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menuAbrir.setText("Abrir");
        menuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirActionPerformed(evt);
            }
        });
        menuArquivo.add(menuAbrir);

        menuSalvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSalvar.setText("Salvar");
        menuSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSalvarActionPerformed(evt);
            }
        });
        menuArquivo.add(menuSalvar);

        menuSalvarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuSalvarComo.setText("Salvar como...");
        menuSalvarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSalvarComoActionPerformed(evt);
            }
        });
        menuArquivo.add(menuSalvarComo);
        menuArquivo.add(jSeparator1);

        menuSair.setText("Sair");
        menuSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSairActionPerformed(evt);
            }
        });
        menuArquivo.add(menuSair);

        jMenuBar1.add(menuArquivo);

        menuAjuda.setText("Ajuda");

        menuConteudoAjuda.setText("Conteúdo da Ajuda");
        menuConteudoAjuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConteudoAjudaActionPerformed(evt);
            }
        });
        menuAjuda.add(menuConteudoAjuda);
        menuAjuda.add(jSeparator3);

        menuSobre.setText("Sobre");
        menuSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSobreActionPerformed(evt);
            }
        });
        menuAjuda.add(menuSobre);

        jMenuBar1.add(menuAjuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Ao pressionar a opção 'Novo' do menu 'Arquivo', primeiro ocorre uma 
     * verificação se o documento sobreu alguma alteração. Caso tenha ocorrido, 
     * o usuário receberá um alerta avisando e questinando se as alterações
     * podem ser perdidas, sendo que ele pode optar por perder, então o campo
     * txtTexto recebe "", não não perder, voltando para a edição. Caso não
     * tenha ocorrido nenhuma alteração, txtTexto recebe "".
     * 
     * @param evt 
     */
    private void menuNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNovoActionPerformed
        if (alteracoesNoDocumento == 1) {
            /* Questinando se devemos perder as alterações do documento atual */
            int resposta;
            resposta = JOptionPane.showConfirmDialog(null,"Arquivo alterado!"
                    + "\n\nO arquivo atual possui alterações que foram\n"
                    + "realizadas e ainda não foram salvas.\n\n"
                    + "Você deseja perder as alterações realizadas?", 
                    "Atenção", 
                    JOptionPane.YES_NO_OPTION);
            if (resposta == 0) {
                bloquerBotaoSalvar(true);

                txtTexto.setText("");
                alteracoesNoDocumento=0;
                nomeDoArquivo = "Sem título";
                caminhoDoArquivo = "";
                tituloDaJanela = nomeDoArquivo + TITULO_DA_JANELA;

                /* Colocando o título da janela */
                setTitle(tituloDaJanela);
            }            
        } else {
            bloquerBotaoSalvar(true);

            txtTexto.setText("");
            alteracoesNoDocumento=0;
            nomeDoArquivo = "Sem título";
            caminhoDoArquivo = "";
            tituloDaJanela = nomeDoArquivo + TITULO_DA_JANELA;

            /* Colocando o título da janela */
            setTitle(tituloDaJanela);
        }
    }//GEN-LAST:event_menuNovoActionPerformed
    
    /**
     * Ao pressionar a opção 'Sobre' do menu 'Ajuda', uma janela será aberta 
     * informando o nome do Bloco de Anotações, empresa que desenvolveu, 
     * desenvolvedor e a versão que está sendo executada.
     * 
     * @param evt 
     */
    private void menuSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSobreActionPerformed
        JanelaSobre sobre = new JanelaSobre(null, true);
        sobre.setVisible(true);
        
        txtTexto.requestFocus();
    }//GEN-LAST:event_menuSobreActionPerformed

    /**
     * Ao pressionar a opção 'Sair' do menu 'Arquivo', o Bloco de Anotações
     * será encerrado caso não exista nenhuma alteração no documento, caso
     * contrário o usuário será notificado e deve decidir se o programa será
     * ou não encerrado.
     * 
     * @param evt 
     */
    private void menuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSairActionPerformed
        if (alteracoesNoDocumento == 1) {
            /* Questinando se devemos perder as alterações do documento atual */
            int resposta;
            resposta = JOptionPane.showConfirmDialog(null,"Arquivo alterado!"
                    + "\n\nO arquivo atual possui alterações que foram\n"
                    + "realizadas e ainda não foram salvas.\n\n"
                    + "Você deseja fechar o documento e perder as\n"
                    + "alterações realizadas?", 
                    "Atenção", 
                    JOptionPane.YES_NO_OPTION);
            if (resposta == 0) {
                System.exit(0);
            }            
        } else
            System.exit(0);
    }//GEN-LAST:event_menuSairActionPerformed

    /**
     * Ao pressionar a opção 'Conteúdo da Ajuda' do menu 'Ajuda', uma janela 
     * será aberta com o ambiente de ajuda para o usuário final.
     * 
     * @param evt 
     */
    private void menuConteudoAjudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConteudoAjudaActionPerformed
        JanelaAjuda ajuda = new JanelaAjuda(null, true);
        ajuda.setVisible(true);
    }//GEN-LAST:event_menuConteudoAjudaActionPerformed

    /**
     * Ao pressionar a opção 'Salvar' do menu 'Arquivo', o arquivo será salvo
     * com as alterações no sistema operacional.
     * 
     * @param evt 
     */
    private void menuSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSalvarActionPerformed
        GerenciarArquivos arquivo = new GerenciarArquivos();

        /* Salvando o arquivo */
        if (nomeDoArquivo.equals("Sem título"))
            menuSalvarComoActionPerformed(evt);
        else
            if (!arquivo.salvar(caminhoDoArquivo, txtTexto.getText()))
                JOptionPane.showMessageDialog(null,arquivo.getErro(),
                            "Erro!", JOptionPane.ERROR_MESSAGE); 
            else {
                tituloDaJanela = nomeDoArquivo + TITULO_DA_JANELA;
                alteracoesNoDocumento = 0;
                menuSalvar.setEnabled(false);

                /* Colocando o título da janela */
                setTitle(tituloDaJanela);
            }
    }//GEN-LAST:event_menuSalvarActionPerformed

    /**
     * Ao pressionar a opção 'Salvar Como' do menu 'Arquivo', o usuário receberá
     * uma janela para escolher o local e o nome do arquivo que será salvo
     * com as alterações no sistema operacional.
     * 
     * @param evt 
     */
    private void menuSalvarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSalvarComoActionPerformed
        String nomeDoArquivoAntigo = nomeDoArquivo;
        
        GerenciarArquivos arquivo = new GerenciarArquivos();
        
        /* Salvando o arquivo */
        if (!arquivo.salvarComo(txtTexto.getText()) && arquivo.getErro().length()>0)
            JOptionPane.showMessageDialog(null,arquivo.getErro(),
                    "Erro!", JOptionPane.ERROR_MESSAGE);
        nomeDoArquivo = arquivo.getNomeDoArquivo();
        if (nomeDoArquivo.length() > 0 ) {
            caminhoDoArquivo = arquivo.getCaminhoDoArquivo();
            tituloDaJanela = nomeDoArquivo + TITULO_DA_JANELA;
            alteracoesNoDocumento = 0;
            menuSalvar.setEnabled(false);

            /* Colocando o título da janela */
            setTitle(tituloDaJanela);
        } else
            nomeDoArquivo = nomeDoArquivoAntigo;
    }//GEN-LAST:event_menuSalvarComoActionPerformed
    
    /**
     * Ao pressionar a opção 'Abrir' do menu 'Arquivo', o usuário receberá
     * uma janela para escolher o local e qual arquivo que será aberto pelo
     * Bloco de Anotações.
     * 
     * @param evt 
     */
    private void menuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirActionPerformed
        if (alteracoesNoDocumento == 1) {
            /* Questinando se devemos perder as alterações do documento atual */
            int resposta;
            resposta = JOptionPane.showConfirmDialog(null,"Arquivo alterado!"
                    + "\n\nO arquivo atual possui alterações que foram\n"
                    + "realizadas e ainda não foram salvas.\n\n"
                    + "Você deseja perder as alterações realizadas?", 
                    "Atenção", 
                    JOptionPane.YES_NO_OPTION);
            if (resposta == 0) {
                GerenciarArquivos arquivo = new GerenciarArquivos();

                /* Abrindo o arquivo */
                if (!arquivo.abrir() && arquivo.getErro().length()>0)
                    JOptionPane.showMessageDialog(null,arquivo.getErro(),
                            "Erro!", JOptionPane.ERROR_MESSAGE);

                txtTexto.setText(arquivo.getConteudo());
                txtTexto.setCaretPosition(0);

                nomeDoArquivo = arquivo.getNomeDoArquivo();
                caminhoDoArquivo = arquivo.getCaminhoDoArquivo();
                tituloDaJanela = nomeDoArquivo + TITULO_DA_JANELA;
                alteracoesNoDocumento = 0;
                menuSalvar.setEnabled(false);

                /* Colocando o título da janela */
                setTitle(tituloDaJanela);
            }            
        } else {
            GerenciarArquivos arquivo = new GerenciarArquivos();

            /* Abrindo o arquivo */
            if (!arquivo.abrir() && arquivo.getErro().length()>0)
                JOptionPane.showMessageDialog(null,arquivo.getErro(),
                        "Erro!", JOptionPane.ERROR_MESSAGE);

            txtTexto.setText(arquivo.getConteudo());
            txtTexto.setCaretPosition(0);

            nomeDoArquivo = arquivo.getNomeDoArquivo();
            caminhoDoArquivo = arquivo.getCaminhoDoArquivo();
            tituloDaJanela = nomeDoArquivo + TITULO_DA_JANELA;
            alteracoesNoDocumento = 0;
            menuSalvar.setEnabled(false);

            /* Colocando o título da janela */
            setTitle(tituloDaJanela);
        }
    }//GEN-LAST:event_menuAbrirActionPerformed

    /**
     * Função principal do sistema, que chama o construtor da classe para 
     * inicializar o formulário principal do Bloco de Anotações.
     * 
     * @param args argumentos da linha de comando
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException|InstantiationException|IllegalAccessException|javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaPrincipal().setVisible(true);
            }
        });
    }
    /* Variáveis di Bloco de Anotações */
    private int alteracoesNoDocumento;
    private String nomeDoArquivo;
    private String caminhoDoArquivo;
    private String tituloDaJanela;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuItem menuAbrir;
    private javax.swing.JMenu menuAjuda;
    private javax.swing.JMenu menuArquivo;
    private javax.swing.JMenuItem menuConteudoAjuda;
    private javax.swing.JMenuItem menuNovo;
    private javax.swing.JMenuItem menuSair;
    private javax.swing.JMenuItem menuSalvar;
    private javax.swing.JMenuItem menuSalvarComo;
    private javax.swing.JMenuItem menuSobre;
    private javax.swing.JTextArea txtTexto;
    // End of variables declaration//GEN-END:variables

}
